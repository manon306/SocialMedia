@model SocialMedia.PL.Models.ProfileEditViewModel

@{
    ViewData["Title"] = "Edit Profile Location";
    var apiKey = ViewBag.GoogleMapsApiKey as string ?? "";
}

<h2>Edit Location</h2>

<form asp-action="Edit" method="post">
    <input asp-for="Id" type="hidden" />
    <div class="form-group">
        <label asp-for="Address">Address</label>
        <input id="addressInput" asp-for="Address" class="form-control" placeholder="Type an address or select suggestion..." autocomplete="off" />
    </div>

    <input id="lat" asp-for="Latitude" type="hidden" />
    <input id="lng" asp-for="Longitude" type="hidden" />

    <div id="map" style="height:400px; width:100%; margin-top:12px;"></div>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Save Location</button>
        <a asp-action="Details" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <script>
        let map, geocoder, marker, infowindow, autocomplete;

        function initMap() {
            geocoder = new google.maps.Geocoder();
            infowindow = new google.maps.InfoWindow();

            // Default center (Egypt) in case no coordinates available
            const defaultLocation = { lat: 26.8206, lng: 30.8025 };

            // initial coordinates from model (if present)
            const initialLat = @((Model.Latitude.HasValue) ? Model.Latitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture) : "null");
            const initialLng = @((Model.Longitude.HasValue) ? Model.Longitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture) : "null");

            const center = (initialLat !== null && initialLng !== null)
                ? { lat: parseFloat(initialLat), lng: parseFloat(initialLng) }
                : defaultLocation;

            map = new google.maps.Map(document.getElementById("map"), {
                zoom: (initialLat !== null && initialLng !== null) ? 14 : 6,
                center: center
            });

            marker = new google.maps.Marker({
                map: map,
                position: center,
                draggable: true
            });

            // If we have an initial location, set info window
            if (initialLat !== null && initialLng !== null) {
                infowindow.setContent(document.getElementById("addressInput").value || "");
                infowindow.open(map, marker);
            }

            // Places Autocomplete
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById("addressInput"),
                { types: ["geocode"] }
            );

            // When user selects from autocomplete suggestions
            autocomplete.addListener("place_changed", function () {
                const place = autocomplete.getPlace();
                if (!place.geometry) {
                    alert("No details available for: " + place.name);
                    return;
                }

                map.setCenter(place.geometry.location);
                map.setZoom(14);
                marker.setPosition(place.geometry.location);

                // fill hidden inputs
                document.getElementById("lat").value = place.geometry.location.lat();
                document.getElementById("lng").value = place.geometry.location.lng();

                infowindow.setContent(place.formatted_address || "");
                infowindow.open(map, marker);
            });

            // Reverse geocode on marker drag end
            google.maps.event.addListener(marker, "dragend", function () {
                const position = marker.getPosition();
                document.getElementById("lat").value = position.lat();
                document.getElementById("lng").value = position.lng();

                geocoder.geocode({ location: position }, function (results, status) {
                    if (status === "OK" && results[0]) {
                        document.getElementById("addressInput").value = results[0].formatted_address;
                        infowindow.setContent(results[0].formatted_address);
                        infowindow.open(map, marker);
                    } else {
                        console.warn("Reverse geocode failed: " + status);
                    }
                });
            });
        }
    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=@(apiKey)&libraries=places&callback=initMap">
    </script>
}